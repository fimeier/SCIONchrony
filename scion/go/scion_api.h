/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "scion_api.go"
 #include "../../config.h"
 #include "../../ntp.h"
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/select.h>
 #include <linux/errqueue.h>
 typedef struct fdInfo *fdInfoPtr;
 typedef const struct msghdr *msghdrConstPtr;
 typedef struct timeval *timevalPtr;
 typedef fd_set *fdsetPtr;
 typedef struct mmsghdr *mmsghdrPtr;
 typedef struct timespec *timespecPtr;
 typedef char *charPtr;
 typedef char *intPtr;
 #ifndef _SCION_API_H
 #define _SCION_API_H
 #include "../../scion.h"
 #endif

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// SetSciondAddr Sets the daemon address
extern int SetSciondAddr(char* _sciondAddr);

// SetLocalAddr registers Chrony's SCION address (ex: 1-ff00:0:112,10.80.45.83)
extern int SetLocalAddr(char* _localAddr);

// IsScionNode arg tbd
//
// returns 1 == scion node
// return 0 == scion node, but old entry <= maybe not used (compare clientMappingDeleteTimeout)
// return -1 == not a scion node
extern int IsScionNode(char* _remoteAddrString);

//SCIONgoconnect creates the needed objects to call/recv data from a scion connections.
//Attention: This doesn't start a receive method! And probably no Register() call
//To send ntp packets as a client, Chrony calls: socket(), connect(), setsockopt(), send*(), *will also start receive method
extern int SCIONgoconnect(int _fd, int callRegister);

// SCIONstartntp Used to call Scion's Register() and to start recv Logic: now all socket options should be set.
//
// Compare the listing at the end.
extern int SCIONstartntp();

//SCIONgobind emulates a bind() call.
//
// callRegister "bool": compare comment in SCIONstartntp.
// The assumption is, that callRegister will always be 0. At least as long as we do not open a scion-connection for the client interface.
// Once we do it, we will be happy to directly start everythin at this point here (rcvlogic, Register()...)
extern int SCIONgobind(int _fd, uint16_t _port, int callRegister);

//SCIONgosetsockopt gets called each time a setsockopt() is executed for So_TIMESTAMPING options.
//Settings are encoded inside of Sinfo. Some of the options are explicitely set in go's memory (redundant).
extern int SCIONgosetsockopt(int _fd);

//SCIONgosocket creates the needed datastructure to keep state in the SCION-GO-World.
//sinfo is a pointer into C's memory. domain, _type and protocol aren't used at the moment, as the are contained in sinfo
//Hint: Interface is designed to allow for future changes
extern int SCIONgosocket(int domain, int _type, int protocol, fdInfoPtr sinfo);

// SCIONgoclose closes all routines working with this (virtual) fd and delete any datastructures created to keep state
//
extern int SCIONgoclose(int _fd);

/*
Optimierung nÃ¶tig!!!!

Warning: Chronyd is using select() as a timeout mechanism
=> "Iff chrony is a client and plans to send a msg in 60sec, it will call select() with an appropriate timeout, return without any ready fd's and then check for sendtimeouts...."
REMARK: At the moment there is no write-Queue => all Flags will be set to  zero if present

As a simple solution: checkNTPfile and checkNTPexcept are used to tell recevmsg to also check the c-world
We always call the go world, this will be correct in most cases and it always returns.
Keep in mind, this is just a test. I want to get rid of everything that comes into play when we have to receive tx-ts over scion.
*/
extern int SCIONselect(int nfds, fdsetPtr readfds, fdsetPtr writefds, fdsetPtr exceptfds, timevalPtr timeout, int* checkNTPfile, int* checkNTPexcept);
extern ssize_t SCIONgosendmsg(int _fd, msghdrConstPtr message, int flags, char* _remoteAddrString, int _requestTxTimestamp);

// SCIONgorecvmmsg collects the received messages and returns them.... but ist not the one actively receiving the stuff
extern int SCIONgorecvmmsg(int _fd, mmsghdrPtr vmessages, unsigned int vlen, int flags, timespecPtr tmo);

#ifdef __cplusplus
}
#endif
