/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "scion_api.go"
 #include "config.h"
 #include "ntp.h"
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/select.h>
 #include <linux/errqueue.h>
 typedef struct fdInfo *fdInfoPtr;
 typedef const struct msghdr *msghdrConstPtr;
 typedef struct timeval *timevalPtr;
 typedef fd_set *fdsetPtr;
 typedef struct mmsghdr *mmsghdrPtr;
 typedef struct timespec *timespecPtr;
 typedef char *charPtr;
 typedef char *intPtr;
 #ifndef _SCION_API_H
 #define _SCION_API_H
 #include "scion.h"
 #endif

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// SetSciondAddr is a pretty cool function... would be even cooler without a line break :-(

extern int SetSciondAddr(char* p0);

// SetLocalAddr registers Chrony's SCION address (ex: 1-ff00:0:112,10.80.45.83)

extern int SetLocalAddr(char* p0);

extern void SCIONPrintState(int p0);

extern int SCIONgoconnect(int p0);

extern int SCIONgosetsockopt(int p0);

extern int SCIONgosocket(int p0, int p1, int p2, fdInfoPtr p3);

extern int SCIONgoclose(int p0);

extern int SCIONselect(int p0, fdsetPtr p1, fdsetPtr p2, fdsetPtr p3, timevalPtr p4);

extern ssize_t SCIONgosendmsg(int p0, msghdrConstPtr p1, int p2);

// SCIONgorecvmmsg collects the received messages and returns them.... but ist not the one actively receiving the stuff

extern int SCIONgorecvmmsg(int p0, mmsghdrPtr p1, unsigned int p2, int p3, timespecPtr p4);

#ifdef __cplusplus
}
#endif
